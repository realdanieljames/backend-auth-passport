[{"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/index.js":"1","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/App.js":"2","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/reportWebVitals.js":"3","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/Navbar.js":"4","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/Auth.js":"5","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/hooks/useAuth.js":"6","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/hooks/useFetchAPI.js":"7","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/hooks/useLocalStorage.js":"8","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/context/AuthContext.js":"9","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/hooks/useAlertMessage.js":"10","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/Home.js":"11","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/shared/PrivateRoute.js":"12"},{"size":459,"mtime":1608068613562,"results":"13","hashOfConfig":"14"},{"size":887,"mtime":1608155336297,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1607981888718,"results":"16","hashOfConfig":"14"},{"size":2384,"mtime":1608155502613,"results":"17","hashOfConfig":"14"},{"size":4582,"mtime":1608155152302,"results":"18","hashOfConfig":"14"},{"size":894,"mtime":1608065834425,"results":"19","hashOfConfig":"14"},{"size":3740,"mtime":1608152219149,"results":"20","hashOfConfig":"14"},{"size":566,"mtime":1608151674631,"results":"21","hashOfConfig":"14"},{"size":797,"mtime":1608149971686,"results":"22","hashOfConfig":"14"},{"size":389,"mtime":1608136638845,"results":"23","hashOfConfig":"14"},{"size":137,"mtime":1608156020179,"results":"24","hashOfConfig":"14"},{"size":466,"mtime":1608155028545,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"cw25re",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/index.js",[],["55","56"],"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/App.js",[],"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/reportWebVitals.js",[],"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/Navbar.js",["57"],"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/Auth.js",["58"],"import React, { useContext, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport useChangeInputConfig from \"./hooks/useAuth\";\nimport useFetchAPI from \"./hooks/useFetchAPI\";\nimport { AuthContext } from \"./context/AuthContext\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n  },\n}));\nexport default function Auth(props) {\n  const {\n    state: { user },\n  } = useContext(AuthContext);\n  useEffect(() => {\n    if (user) {\n      props.history.push(\"/home\");\n    }\n  }, [user]);\n  let isLogin = props.match.path === \"/login\";\n  let buttonTitle = isLogin ? \"Login\" : \"Sign up\";\n  let apiURL = isLogin ? \"/users/login\" : \"/users/sign-up\";\n  const [\n    { isLoading, response, error },\n    handleAPICallButtonSubmit,\n    toggle,\n    ,\n    handleMessageClose,\n  ] = useFetchAPI(apiURL);\n  const classes = useStyles();\n  const [\n    email,\n    handleEmailChange,\n    isEmailError,\n    emailErrorMessage,\n    canEmailSubmit,\n    clearEmailInput,\n  ] = useChangeInputConfig(\"email\");\n  const [\n    password,\n    handlePasswordChange,\n    isPasswordError,\n    passwordErrorMessage,\n    canPasswordSubmit,\n    clearPasswordInput,\n  ] = useChangeInputConfig(\"password\");\n  const [\n    username,\n    handleUsernameChange,\n    isUsernameError,\n    usernameErrorMessage,\n    canUsernameSubmit,\n    clearUsernameInput,\n  ] = useChangeInputConfig(\"username\");\n  function handleSubmit(e) {\n    e.preventDefault();\n    const user = isLogin ? { email, password } : { email, username, password };\n    handleAPICallButtonSubmit({\n      method: \"post\",\n      data: {\n        ...user,\n      },\n    });\n    clearEmailInput();\n    clearUsernameInput();\n    clearPasswordInput();\n  }\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n  function successMessage() {\n    return (\n      <Snackbar\n        open={toggle}\n        autoHideDuration={6000}\n        onClose={handleMessageClose}\n        style={{ transform: \"translateY(-500px)\" }}\n      >\n        <Alert onClose={handleMessageClose} severity=\"success\">\n          {response}\n        </Alert>\n      </Snackbar>\n    );\n  }\n  function errorMessage() {\n    return (\n      <Snackbar\n        open={toggle}\n        autoHideDuration={6000}\n        onClose={handleMessageClose}\n        style={{ transform: \"translateY(-500px)\" }}\n      >\n        <Alert onClose={handleMessageClose} severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n    );\n  }\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n  return (\n    <Grid container spacing={0} justify=\"center\">\n      {response && successMessage()}\n      {error && errorMessage()}\n      <form className={classes.root} onSubmit={handleSubmit}>\n        <Grid item m={6}>\n          <TextField\n            fullWidth\n            label=\"Email\"\n            name=\"email\"\n            value={email}\n            onChange={handleEmailChange}\n            error={isEmailError}\n            helperText={emailErrorMessage}\n          />\n        </Grid>\n        {!isLogin && (\n          <Grid item m={6}>\n            <TextField\n              value={username}\n              onChange={handleUsernameChange}\n              name=\"username\"\n              fullWidth\n              label=\"Username\"\n              error={isUsernameError}\n              helperText={usernameErrorMessage}\n            />\n          </Grid>\n        )}\n        <Grid item m={6}>\n          <TextField\n            fullWidth\n            value={password}\n            label=\"Password\"\n            name=\"password\"\n            onChange={handlePasswordChange}\n            error={isPasswordError}\n            helperText={passwordErrorMessage}\n          />\n        </Grid>\n        <Grid style={{ textAlign: \"center\" }}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ marginTop: 10 }}\n            disabled={\n              isLogin\n                ? canEmailSubmit || canPasswordSubmit\n                : canEmailSubmit || canPasswordSubmit || canUsernameSubmit\n            }\n          >\n            {buttonTitle}\n          </Button>\n        </Grid>\n      </form>\n    </Grid>\n  );\n}","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/hooks/useAuth.js",[],"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/hooks/useFetchAPI.js",["59","60"],"import { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\n\n\nimport useLocalStorage from \"./useLocalStorage\"\n\nimport { AuthContext } from \"../context/AuthContext\";\n\n\n//=====================================================================================//\n//=====================================================================================//\n\nfunction useFetchAPI(url) {\n\n    const baseURL =\n        process.env.NODE_ENV === \"development\" ?\n        \"http://localhost:3001/api\" :\n        \"DEPLOYED ADDRESS example: https:hamster.com/api\";\n    const [isLoading, setIsLoading] = useState(false);\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    const [options, setOptions] = useState({});\n    const [isMessageOpen, setIsMessageOpen] = useState(false);\n\n\n    const [, setJwtToken, jwtDecodeFunc] = useLocalStorage(\"jwtToken\");\n\n    const { dispatch } = useContext(AuthContext);\n\n\n\n\n    //=====================================================================================//\n    //=====================================================================================//\n    function handleMessageOpen() {\n        setIsMessageOpen(true);\n    }\n\n\n    //=====================================================================================//\n    //=====================================================================================//\n    function handleMessageClose() {\n        console.log(\"====\");\n        setError(null);\n        setResponse(null);\n        setIsMessageOpen(false);\n    }\n\n\n    //=====================================================================================//\n    //=====================================================================================//\n    function handleAPICallButtonSubmit(options = {}) {\n        setOptions(options);\n        setIsLoading(true);\n    }\n\n\n    //=====================================================================================//\n    //=====================================================================================//\n    async function handleAPIFetchCall() {\n        const requestOptionObj = {\n            ...options,\n            ... {\n                headers: {\n                    authorization: null,\n                },\n            },\n        };\n        try {\n            handleMessageOpen();\n            let response = await axios(baseURL + url, requestOptionObj);\n\n\n\n            if (response.data.jwtToken) {\n                setJwtToken(response.data.jwtToken);\n                let decoded = jwtDecodeFunc(response.data.jwtToken);\n                dispatch({\n                    type: \"LOGIN\",\n                    user: decoded,\n                });\n                setIsLoading(false)\n            } else {\n                setResponse(response.data.message);\n                setIsLoading(false);\n            }\n\n\n        } catch (e) {\n\n            setError(e.response.data.message);\n            setIsLoading(false);\n        }\n    }\n\n\n    //=====================================================================================//\n    //=====================================================================================//\n    useEffect(() => {\n        if (!isLoading) {\n            return;\n        }\n        handleAPIFetchCall();\n    }, [isLoading, url, options, baseURL]);\n\n\n    //=====================================================================================//\n    //=====================================================================================//\n    return [\n        { isLoading, response, error, setError, setResponse },\n        handleAPICallButtonSubmit,\n        isMessageOpen,\n        handleMessageOpen,\n        handleMessageClose,\n    ];\n}\n\n\nexport default useFetchAPI;","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/hooks/useLocalStorage.js",["61"],"import { useState, useEffect } from \"react\";\nimport jwtDecode from 'jwt-decode'\n\n\n\n\nfunction useLocalStorage (key, initialValue = \"\"){\n\n        const [jwtTokenValue, setJwtTokenValue] = useState(()=>{\n        return localStorage.getItem(key) || initialValue;\n    });\n    \n    \n    useEffect(()=>{\n        localStorage.setItem(key, jwtTokenValue);\n    }, [jwtTokenValue, setJwtTokenValue]);\n\n    function jwtDecodeFunc(token){\n        return jwtDecode(token)\n    }\n    \n    return [jwtTokenValue, setJwtTokenValue,  jwtDecodeFunc];\n}\n\n\nexport default useLocalStorage;","/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/context/AuthContext.js",[],"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/hooks/useAlertMessage.js",[],["62","63"],"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/Home.js",[],"/Users/danieljames/CodeImmersives-WebDev/term-2/week-15/react-hooks-auth-frontend/src/components/shared/PrivateRoute.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":50,"column":6,"nodeType":"70","endLine":50,"endColumn":8,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":27,"column":6,"nodeType":"70","endLine":27,"endColumn":12,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":63,"column":16,"nodeType":"76","messageId":"77","endLine":63,"endColumn":17,"fix":"78"},{"ruleId":"68","severity":1,"message":"79","line":104,"column":8,"nodeType":"70","endLine":104,"endColumn":42,"suggestions":"80"},{"ruleId":"68","severity":1,"message":"81","line":16,"column":8,"nodeType":"70","endLine":16,"endColumn":41,"suggestions":"82"},{"ruleId":"64","replacedBy":"83"},{"ruleId":"66","replacedBy":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'jwtDecodeFunc'. Either include them or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["88"],"rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"89","text":"90"},"React Hook useEffect has a missing dependency: 'handleAPIFetchCall'. Either include it or remove the dependency array.",["91"],"React Hook useEffect has a missing dependency: 'key'. Either include it or remove the dependency array.",["92"],["85"],["86"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},[2180,2181],"",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [dispatch, jwtDecodeFunc]",{"range":"101","text":"102"},"Update the dependencies array to be: [props.history, user]",{"range":"103","text":"104"},"Update the dependencies array to be: [isLoading, url, options, baseURL, handleAPIFetchCall]",{"range":"105","text":"106"},"Update the dependencies array to be: [jwtTokenValue, key, setJwtTokenValue]",{"range":"107","text":"108"},[1573,1575],"[dispatch, jwtDecodeFunc]",[849,855],"[props.history, user]",[3286,3320],"[isLoading, url, options, baseURL, handleAPIFetchCall]",[354,387],"[jwtTokenValue, key, setJwtTokenValue]"]